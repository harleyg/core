<?php/** * Notifier component class. * * @copyright     Copyright 2010, *ROCK*HARBOR * @link          http://rockharbor.org *ROCK*HARBOR * @package       core * @subpackage    core.app.controllers.components *//** * Notifier Component * * This component is used for sending notifications via email and saving them * to the database using a model. * * @todo Email based on user preference (set in controller?) * @package       core * @subpackage    core.app.controllers.components */class NotifierComponent extends Object {/** * Additional components needed by this component * * @var array */	var $components = array('QueueEmail.QueueEmail');/** * Smtp settings * * @var array */	var $smtp = array(		'port'=>'25',		'timeout'=>'30',		'host' => 'mail.rockharbor.org'	);/** * Initialize component * * @param object $controller Instantiating controller * @param array $settings Default settings * @access public */	function initialize(&$controller, $settings = array()) {		$this->Controller =& $controller;		$this->Profile = ClassRegistry::init('Profile');		$this->Notification = ClassRegistry::init('Notification');		$this->_set($settings);	}/** * Sends an email if the template exists, and saves a notification if the * template exists * * ### Options: * - integer $from The User id of the sender * - mixed $to List of User ids to send to (can be one) * - string $subject The subject line * - string $template The template to load (view element) * - string $layout The layout to load * - string $body The body of the message. Usually the template takes care of this. * * @param array $options Array of options * @return boolean Success * @access public */ 	function notify($options = array()) {		extract($options);		if (!$to || empty($template)) {			return false;		}				$content = $this->_render($template);		if ($content === false) {			return false;		}		$data = array(			$this->foreignKey => $to,			$this->contentField => $content		);				if ($this->_save($data)) {			return true;		}				return false;	}/** * Queues an email * * If $from is not defined, it sends the email from the site instead, using * configured options (see AppSettings) * * ### Options: * - integer $from The User id of the sender * - mixed $to List of User ids to send to (can be one) * - string $subject The subject line * - string $template The template to load (view element) * - string $layout The layout to load * - string $body The body of the message. Usually the template takes care of this. * * @return boolean Success * @access protected */	function _send($options = array()) {		$default = array(			'from' => null,			'to' => array(),			'subject' => '',			'template' => 'default',			'layout' => 'default',			'body' => null		);		$options = array_merge($default, $options);		extract($options);		// set system defaults if no 'from' user		if (!$from) {			$from = array(				'Profile' => array(					'name' => Core::read('general.site_name_tagless'),					'primary_email' => Core::read('notifications.site_email')				)			);		} else {			$from = $this->Profile->read(null, $from);		}			if (!is_array($to)) {			$to = array($to);		}		$tos = $this->Profile->find('all', array(			'conditions' => array(				'User.id' => $to,				'User.active' => true			),			'contain' => array(				'User'			)		));		foreach ($tos as $sendTo) {			$this->QueueEmail->reset();			$this->QueueEmail->smtpOptions = $this->smtp;			$this->QueueEmail->delivery = 'smtp';			$this->QueueEmail->sendAs = 'html';			$this->QueueEmail->layout = $layout;			$this->QueueEmail->template = $template;			$this->QueueEmail->from = $from['Profile']['name'].' <'.$from['Profile']['primary_email'].'>';			$this->QueueEmail->subject = Core::read('notifications.email_subject_prefix').' '.$subject;			if (!empty($sendTo['Profile']['primary_email']) && !empty($sendTo['Profile']['name'])) {				$this->QueueEmail->to = $sendTo['Profile']['name'].' <'.$sendTo['Profile']['primary_email'].'>';			}			if (!$this->QueueEmail->send($body)) {				CakeLog::write('smtp', $this->QueueEmail->smtpError);			}		}	}/** * Saves the notification to the database to $notificationClass * * @param array $data The data to save * @return boolean Success * @access private */ 		function _save($data) {		if (!isset($this->notification) || !method_exists($this->notification, 'save')) {			trigger_error('Notifier::_save() : Notification model does not exist.', E_USER_WARNING);			return false;		}				if (!empty($this->saveData)) {			$data = array_merge($this->saveData, $data);		}				$this->notification->create();		return $this->notification->save($data);	}/** * Renders the notification template * * @param string $template The template to render * @return string Rendered content * @access private */ 		function _render($template) {		// get view for rendering		App::import('View', 'view');				$View = new View($this->Controller, false);				$View->layout = 'notification';		if (!file_exists(ELEMENTS.'notification'.DS.$template.'.ctp')) {			return false;		}		$content = $View->element('notification' . DS . $template, array(), true);		$content = $View->renderLayout($content);				return $content;	}}?>