<?php/** * Notifier component class. * * @copyright     Copyright 2010, *ROCK*HARBOR * @link          http://rockharbor.org *ROCK*HARBOR * @package       core * @subpackage    core.app.controllers.components *//** * Notifier Component * * This component is used for sending notifications via email and saving them * to the database using a model. * * @todo Email based on user preference (set in controller?) * @todo Instatiate notification class like how Auth::authenticate does, so it's instantiated once per load * @package       core * @subpackage    core.app.controllers.components */class NotifierComponent extends Object{/** * Enable or disable the component * * @var boolean */	var $enabled = true;/** * The initialized model to save the data to * * @var string * @access public */	var $notification;/** * The User foreignKey * * @var string * @access public */	var $foreignKey = 'user_id';	/** * The field to save the template html in $notificationClass * * @var string * @access public */	var $contentField = 'body';/** * Additional data to save to the model * * @var array * @access public */	var $saveData = array();/** * Initialize component * * @param object $controller Instantiating controller * @param array $settings Default settings * @access public */	function initialize(&$controller, $settings = array()) {		$this->Controller =& $controller;		$this->_set($settings);	}/** * Sends a notification * * @param integer $to The user id * @param string $template The template to render * @return boolean Success * @access public */ 	function notify($to = null, $template = '') {		if (!$this->enabled) {			return false;		}				if (!$to || empty($template)) {			return false;		}				$content = $this->_render($template);		if ($content === false) {			return false;		}		$data = array(			$this->foreignKey => $to,			$this->contentField => $content		);				if ($this->_save($data)) {			return true;		}				return false;	}/** * Saves the notification to the database to $notificationClass * * @param array $data The data to save * @return boolean Success * @access private */ 		function _save($data) {		if (!isset($this->notification) || !method_exists($this->notification, 'save')) {			trigger_error('Notifier::_save() : Notification model does not exist.', E_USER_WARNING);			return false;		}				if (!empty($this->saveData)) {			$data = array_merge($this->saveData, $data);		}				$this->notification->create();		return $this->notification->save($data);	}/** * Renders the notification template * * @param string $template The template to render * @return string Rendered content * @access private */ 		function _render($template) {		// get view for rendering		App::import('View', 'view');				$View = new View($this->Controller, false);				$View->layout = 'notification';		if (!file_exists(ELEMENTS.'notification'.DS.$template.'.ctp')) {			return false;		}		$content = $View->element('notification' . DS . $template, array(), true);		$content = $View->renderLayout($content);				return $content;	}}?>