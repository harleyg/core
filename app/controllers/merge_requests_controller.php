<?php/** * Merge Request controller class. * * @copyright     Copyright 2010, *ROCK*HARBOR * @link          http://rockharbor.org *ROCK*HARBOR * @package       core * @subpackage    core.app.controllers *//** * MergeRequests Controller * * @package       core * @subpackage    core.app.controllers */class MergeRequestsController extends AppController {/** * The name of the controller * * @var string */	var $name = 'MergeRequests';/** * Extra helpers for this controller * * @var array */	var $helpers = array('Formatting');/** * Model::beforeFilter() callback * * Used to override Acl permissions for this controller. * * @access private */ 	function beforeFilter() {		parent::beforeFilter();	}/** * Shows a list of merge requests */ 		function index() {		// get model		$Model = ClassRegistry::init($this->passedArgs['model']);			$this->MergeRequest->belongsTo['Source']['className'] = $this->passedArgs['model'];		$this->MergeRequest->belongsTo['Source']['conditions'] = array('MergeRequest.model' => $this->passedArgs['model']);		$this->MergeRequest->belongsTo['Target']['className'] = $this->passedArgs['model'];		$this->MergeRequest->belongsTo['Target']['conditions'] = array('MergeRequest.model' => $this->passedArgs['model']);				$this->set('model', $Model->alias);		$this->set('displayField', $Model->displayField);		$this->set('requests', $this->paginate());	}/** * View a request * * @param integer $id The id of the request to view */ 		function view($id = null) {		if (!$id) {			$this->Session->setFlash('Invalid id', 'flash_failure');			$this->redirect(array('action' => 'index'));		}				$this->MergeRequest->recursive = 2;		$request = $this->MergeRequest->read(null, $id);						$this->set('result', $request);		$this->set('model', $request['MergeRequest']['model']);	}/** * Merge a request * * @param integer $id The id of the request to merge */	function merge($id = null) {		if (!$id) {			$this->Session->setFlash('Invalid id', 'flash_failure');			$this->redirect(array('action' => 'index'));		}				// get request		$request = $this->MergeRequest->read(null, $id);		// get model we're merging		$Model = ClassRegistry::init($request['MergeRequest']['model']);				if ($Model->merge($request['MergeRequest']['merge_id'], $request['MergeRequest']['model_id'])) {			if ($request['MergeRequest']['model'] == 'User') {				// activate if they're a user				$Model->id = $request['MergeRequest']['merge_id'];				$Model->saveField('active', true);			}						$this->MergeRequest->delete($id);			$this->Session->setFlash('Merge complete!');		} else {			$this->Session->setFlash('Error merging requests');		}		}/** * Delete a request * * @param integer $id The id of the request to delete */	function delete($id = null) {				if (!$id) {			$this->Session->setFlash('Invalid id');			$this->redirect(array('action'=>'index'));		}				// get request		$request = $this->MergeRequest->read(null, $id);		// get model we're merging		$Model = ClassRegistry::init($request['MergeRequest']['model']);				// delete associated model target first		if ($Model->delete($request['MergeRequest']['merge_id'])) {			// remove request			$this->MergeRequest->delete($id);			$this->Session->setFlash('Request and merge data deleted. The original data was left untouched.');			$this->redirect(array('action'=>'index', 'model' => $request['MergeRequest']['model']));		}		$this->Session->setFlash('Request was not deleted');		$this->redirect(array('action' => 'index', 'model' => $request['MergeRequest']['model']));	}}?>